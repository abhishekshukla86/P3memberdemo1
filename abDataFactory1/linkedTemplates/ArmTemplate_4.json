{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "abDataFactory1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/demo1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Line_Of_Business_Category_Code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Line_Of_Business_Category_Code_Desc",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText11",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable13",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BenefitPlantype",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Benefit_Plan_type_code",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Description",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Benefit_Plan_type_Desc",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Source_PlantType",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Sink_BenefitPlan",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Member_Enrollment_Test2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Member_Enrollment_CSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable12",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_Member_enrollment",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "Lookup1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tMember_KEY as string,\n\t\tMEMBER_ID as integer,\n\t\tClient_Member_ID as string,\n\t\tEnrollment_Contract_ID as string,\n\t\tEnrollment_Benefit_Plan_ID as string,\n\t\tSTART_DATE as date,\n\t\tEND_DATE as date 'MM/dd/yyyy',\n\t\tMEDICAL_BENEFIT as string,\n\t\tPAYER_CODE as string,\n\t\tPRODUCT_CODE as string,\n\t\tPCP_PROVIDERID as string,\n\t\tProvider_Type_Code as string,\n\t\tMENTALHEALTH_AMBULATORY as string,\n\t\tMENTALHEALTH_INPATIENT as string,\n\t\tMENTALHEALTH_DAYNIGHT as string,\n\t\tCHEMDEPEND_AMBULATORY as string,\n\t\tCHEMDEPEND_INPATIENT as string,\n\t\tCHEMDEPEND_DAYNIGHT as string,\n\t\tDRUG_BENEFIT as string,\n\t\tVISION_BENEFIT as string,\n\t\tDENTAL_BENEFIT as string,\n\t\tHospice_Indicator as string,\n\t\tDisease_Management_Program_Indicator as string,\n\t\tDisease_Management_Severity_Factor as string,\n\t\tGROUP_ID as string,\n\t\tOTHER_INSURANCE_FLAG as string,\n\t\tPRIMARY_INSURANCE_FLAG as string,\n\t\tPLANEMPLOYEEFLAG as string,\n\t\tMEDICARE_CONTRACT_NUMBER as string,\n\t\tAID_GROUP as string,\n\t\tCOBRA_FLAG as string,\n\t\tCOVERAGE_TIER as string,\n\t\tEMPLOYERCODE as string,\n\t\tEMPLOYERDESCRIPTION as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE1 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE2 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE3 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE4 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE5 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE6 as string,\n\t\tMEDICARE_PLANID_NUMBER as string,\n\t\tSNP_ENROLLEE_TYPE as string,\n\t\tPCP_START_DATE as date,\n\t\tPCP_END_DATE as date 'MM/dd/yyyy',\n\t\tClient_Member_Enrollment_ID as string,\n\t\tMember_Enrollment_Member_Alternate_Identifier_1 as string,\n\t\tMember_Enrollment_Alternate_Identifier_2 as string,\n\t\tMember_Enrollment_Alternate_Identifier_3 as string,\n\t\tMember_Enrollment_Alternate_Identifier_4 as string,\n\t\tMember_Enrollment_Alternate_Identifier_5 as string,\n\t\tMember_Enrollment_Alternate_Identifier_6 as string,\n\t\tMember_Enrollment_Alternate_Identifier_7 as string,\n\t\tMember_Enrollment_Alternate_Identifier_8 as string,\n\t\tBenefit_Code as string,\n\t\t{Member Enrollment QHP State} as string,\n\t\tESRD_Flag as string,\n\t\tLTI_Flag as string,\n\t\tIssuer_ID as string,\n\t\tMetal_Level as string,\n\t\tCost_Sharing_Reduction_Code as string,\n\t\tMSP_Flag as string,\n\t\tMarket_Coverage as string,\n\t\tEnrollment_Route as string,\n\t\tCSR_Eligibility_Flag as string,\n\t\tPlan_Marketing_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource(output(\n\t\tMember_Alternate_Identifier as string,\n\t\tMember_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> source2\nsource1 keyGenerate(output(Member_Enrollment_ID as long),\n\tstartAt: 1L) ~> SurrogateKey1\nDerivedColumn2, source2 lookup(source1@MEMBER_ID == source2@Member_id,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup1\nSurrogateKey1 derive(Provider_Type_Code = iif(isNull(PCP_PROVIDERID), PCP_PROVIDERID, 'P3')) ~> DerivedColumn2\nLookup1 sink(input(\n\t\tMember_Enrollment_ID as integer,\n\t\tMember_KEY as string,\n\t\tClient_Member_ID as string,\n\t\tEnrollment_Contract_ID as integer,\n\t\tEnrollment_Benefit_Plan_ID as integer,\n\t\tCoverage_Begin as date,\n\t\tCoverage_End as date,\n\t\tMEDICAL_BENEFIT_Flag as string,\n\t\tPayer_Code as string,\n\t\tProduct_Code as string,\n\t\tClient_Provider_ID as string,\n\t\tProvider_Type_Code as string,\n\t\tMental_Health_Ambulatory_Indicator as string,\n\t\tMental_Health_Inpatient_Indicator as string,\n\t\tMental_Health_24Hour_Indicator as string,\n\t\tChemical_Dependency_Ambulatory_Indicator as string,\n\t\tChemical_Dependency_Inpatient_Indicator as string,\n\t\tChemical_Dependency_24Hour_Indicator as string,\n\t\tPrescription_Drug_Indicator as string,\n\t\tVision_Indicator as string,\n\t\tDental_Indicator as string,\n\t\tHospice_Indicator as string,\n\t\tDisease_Management_Program_Indicator as string,\n\t\tDisease_Management_Severity_Factor as decimal(18,0),\n\t\tmember_group_code as string,\n\t\tOTHER_INSURANCE_FLAG as string,\n\t\tPRIMARY_INSURANCE_FLAG as string,\n\t\tPlan_Employee_Indicator as string,\n\t\tmedicare_contract_code as string,\n\t\tAID_GROUP as string,\n\t\tCOBRA_FLAG as string,\n\t\tCOVERAGE_TIER as string,\n\t\tEMPLOYERCODE as string,\n\t\tEMPLOYERDESCRIPTION as string,\n\t\tMember_enrollment_CustomCode_1 as string,\n\t\tMember_enrollment_CustomCode_2 as string,\n\t\tMember_enrollment_CustomCode_3 as string,\n\t\tMember_Enrollment_CustomCode_4 as string,\n\t\tMember_Enrollment_CustomCode_5 as string,\n\t\tMember_Enrollment_CustomCode_6 as string,\n\t\tplan_code as string,\n\t\tSNP_ENROLLEE_TYPE as string,\n\t\tPCP_START_DATE as date,\n\t\tPCP_END_DATE as date,\n\t\tClient_Member_Enrollment_ID as string,\n\t\tMember_Enrollment_Member_Alternate_Identifier_1 as string,\n\t\tMember_Enrollment_Alternate_Identifier_2 as string,\n\t\tMember_Enrollment_Alternate_Identifier_3 as string,\n\t\tMember_Enrollment_Alternate_Identifier_4 as string,\n\t\tMember_Enrollment_Alternate_Identifier_5 as string,\n\t\tMember_Enrollment_Alternate_Identifier_6 as string,\n\t\tMember_Enrollment_Alternate_Identifier_7 as string,\n\t\tMember_Enrollment_Alternate_Identifier_8 as string,\n\t\tBenefit_Code as string,\n\t\tMember_Enrollment_QHP_State as string,\n\t\tESRD_Flag as string,\n\t\tLTI_Flag as string,\n\t\tIssuer_ID as string,\n\t\tMetal_Level as string,\n\t\tCost_Sharing_Reduction_Code as string,\n\t\tMSPF_lag as string,\n\t\tMarket_Coverage as string,\n\t\tEnrollment_Route as string,\n\t\tCSR_Eligibility_Flag as string,\n\t\tPlan_Marketing_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tMember_Enrollment_ID,\n\t\tMember_KEY = Member_Alternate_Identifier,\n\t\tClient_Member_ID,\n\t\tEnrollment_Contract_ID,\n\t\tEnrollment_Benefit_Plan_ID,\n\t\tCoverage_Begin = START_DATE,\n\t\tCoverage_End = END_DATE,\n\t\tMEDICAL_BENEFIT_Flag = MEDICAL_BENEFIT,\n\t\tPayer_Code = PAYER_CODE,\n\t\tProduct_Code = PRODUCT_CODE,\n\t\tClient_Provider_ID = PCP_PROVIDERID,\n\t\tProvider_Type_Code,\n\t\tMental_Health_Ambulatory_Indicator = MENTALHEALTH_AMBULATORY,\n\t\tMental_Health_Inpatient_Indicator = MENTALHEALTH_INPATIENT,\n\t\tMental_Health_24Hour_Indicator = MENTALHEALTH_DAYNIGHT,\n\t\tChemical_Dependency_Ambulatory_Indicator = CHEMDEPEND_AMBULATORY,\n\t\tChemical_Dependency_Inpatient_Indicator = CHEMDEPEND_INPATIENT,\n\t\tChemical_Dependency_24Hour_Indicator = CHEMDEPEND_DAYNIGHT,\n\t\tPrescription_Drug_Indicator = DRUG_BENEFIT,\n\t\tVision_Indicator = VISION_BENEFIT,\n\t\tDental_Indicator = DENTAL_BENEFIT,\n\t\tHospice_Indicator,\n\t\tDisease_Management_Program_Indicator,\n\t\tDisease_Management_Severity_Factor,\n\t\tmember_group_code = GROUP_ID,\n\t\tOTHER_INSURANCE_FLAG,\n\t\tPRIMARY_INSURANCE_FLAG,\n\t\tPlan_Employee_Indicator = PLANEMPLOYEEFLAG,\n\t\tmedicare_contract_code = MEDICARE_CONTRACT_NUMBER,\n\t\tAID_GROUP,\n\t\tCOBRA_FLAG,\n\t\tCOVERAGE_TIER,\n\t\tEMPLOYERCODE,\n\t\tEMPLOYERDESCRIPTION,\n\t\tMember_enrollment_CustomCode_1 = MEMBERENROLLMENTCUSTOMCODE1,\n\t\tMember_enrollment_CustomCode_2 = MEMBERENROLLMENTCUSTOMCODE2,\n\t\tMember_enrollment_CustomCode_3 = MEMBERENROLLMENTCUSTOMCODE3,\n\t\tMember_Enrollment_CustomCode_4 = MEMBERENROLLMENTCUSTOMCODE4,\n\t\tMember_Enrollment_CustomCode_5 = MEMBERENROLLMENTCUSTOMCODE5,\n\t\tMember_Enrollment_CustomCode_6 = MEMBERENROLLMENTCUSTOMCODE6,\n\t\tplan_code = MEDICARE_PLANID_NUMBER,\n\t\tSNP_ENROLLEE_TYPE,\n\t\tPCP_START_DATE,\n\t\tPCP_END_DATE,\n\t\tClient_Member_Enrollment_ID,\n\t\tMember_Enrollment_Member_Alternate_Identifier_1,\n\t\tMember_Enrollment_Alternate_Identifier_2,\n\t\tMember_Enrollment_Alternate_Identifier_3,\n\t\tMember_Enrollment_Alternate_Identifier_4,\n\t\tMember_Enrollment_Alternate_Identifier_5,\n\t\tMember_Enrollment_Alternate_Identifier_6,\n\t\tMember_Enrollment_Alternate_Identifier_7,\n\t\tMember_Enrollment_Alternate_Identifier_8,\n\t\tBenefit_Code,\n\t\tMember_Enrollment_QHP_State = {Member Enrollment QHP State},\n\t\tESRD_Flag,\n\t\tLTI_Flag,\n\t\tIssuer_ID,\n\t\tMetal_Level,\n\t\tCost_Sharing_Reduction_Code,\n\t\tMSPF_lag = MSP_Flag,\n\t\tMarket_Coverage,\n\t\tEnrollment_Route,\n\t\tCSR_Eligibility_Flag,\n\t\tPlan_Marketing_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MemberKey')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText8",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable12",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						}
					],
					"script": "source(output(\n\t\tMEMBER_ID as string,\n\t\tFULL_NAME as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tMIDDLE_NAME as string,\n\t\tSSN as string,\n\t\tMember_Key as string,\n\t\tDOB as string,\n\t\tGENDER as string,\n\t\tMEDICARE_ID as string,\n\t\tMEDICAID_ID as string,\n\t\tSUBSCRIBER_ID as string,\n\t\tMEMBERALTID1 as string,\n\t\tMEMBERALTID2 as string,\n\t\tMEMBERALTID3 as string,\n\t\tMEMBERALTID4 as string,\n\t\tMEMBERALTID5 as string,\n\t\tMEMBERALTID6 as string,\n\t\tRELATIONSHIP as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as string,\n\t\tCOUNTY as string,\n\t\tMember_Contact_Pref as string,\n\t\tLocation_Usage_Type_Code as string,\n\t\tLocation_Usage_Preference_Code as string,\n\t\tHOME_PHONE as string,\n\t\tMOBILE_PHONE as string,\n\t\tPhone_Usage_Type_Code as string,\n\t\tPhone_Usage_Preference_Code as string,\n\t\tEMAIL_ADDRESS as string,\n\t\tEmail_Usage_Type_Code as string,\n\t\tEmail_Usage_Preference_Code as string,\n\t\tMARITAL_STATUS as string,\n\t\tRACE as string,\n\t\tETHNICITY as string,\n\t\tEthnicity_Type as string,\n\t\tRBI_ETHNICITY as string,\n\t\tDeceased_Date as string,\n\t\tRACEETHNICITYSOURCE as string,\n\t\tLANGUAGESPOKEN as string,\n\t\tLANGUAGEWRITTEN as string,\n\t\tLANGUAGEOTHER as string,\n\t\tLANGUAGESPOKENSOURCE as string,\n\t\tLANGUAGEWRITTENSOURCE as string,\n\t\tLANGUAGEOTHERSOURCE as string,\n\t\tLanguge_Usage_Type_Code as string,\n\t\tLanguge_Usage_Preference_Code as string,\n\t\tALTERNATE_PHONE1 as string,\n\t\tALTERNATE_PHONE2 as string,\n\t\tALTERNATE_PHONE3 as string,\n\t\tALTERNATE_PHONE4 as string,\n\t\tALTERNATE_PHONE5 as string,\n\t\tAUTHORIZED_REP_A as string,\n\t\tAUTHORIZED_REP_A_PHONE_1 as string,\n\t\tAUTHORIZED_REP_A_PHONE_2 as string,\n\t\tAUTHORIZED_REP_B as string,\n\t\tAUTHORIZED_REP_B_PHONE_1 as string,\n\t\tAUTHORIZED_REP_B_PHONE_2 as string,\n\t\tOREC as string,\n\t\tECDS_Flag as string,\n\t\tEnrollee_Unique_ID as string,\n\t\tQHP_State as string,\n\t\tCitizenship_Status_Code as string,\n\t\tCountry_Flips_Code as string,\n\t\tWhite_Indirect_Estimate as string,\n\t\tBlack_Indirect_Estimate as string,\n\t\tAsian_Indirect_Estimate as string,\n\t\tAme_rIndian_Indirect_Estimate as string,\n\t\tOther_Indirect_Estimate as string,\n\t\tHispanic_Indirect_Estimate as string,\n\t\tClient_ID_Number as string,\n\t\tCMS_PlanID as string,\n\t\tClient_Member_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 derive(Member_Key = (MEMBER_ID+SSN),\n\t\tMEMBER_ID = MEMBER_ID) ~> DerivedColumn1\nDerivedColumn1 select(mapColumn(\n\t\tMember_Key,\n\t\tMEMBER_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 sink(input(\n\t\tMember_Alternate_Identifier as string,\n\t\tMember_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tMember_Alternate_Identifier = Member_Key,\n\t\tMember_id = MEMBER_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow10')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SRCMemberEnrollment",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable11",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tMEMBER_ID as string,\n\t\tSTART_DATE as string,\n\t\tEND_DATE as string,\n\t\tMEDICAL_BENEFIT as string,\n\t\tPAYER_CODE as string,\n\t\tPRODUCT_CODE as string,\n\t\tPCP_PROVIDERID as string,\n\t\tMENTALHEALTH_AMBULATORY as string,\n\t\tMENTALHEALTH_INPATIENT as string,\n\t\tMENTALHEALTH_DAYNIGHT as string,\n\t\tCHEMDEPEND_AMBULATORY as string,\n\t\tCHEMDEPEND_INPATIENT as string,\n\t\tCHEMDEPEND_DAYNIGHT as string,\n\t\tDRUG_BENEFIT as string,\n\t\tVISION_BENEFIT as string,\n\t\tDENTAL_BENEFIT as string,\n\t\tGROUP_ID as string,\n\t\tGROUP_NAME as string,\n\t\tOTHER_INSURANCE_FLAG as string,\n\t\tPRIMARY_INSURANCE_FLAG as string,\n\t\tPLANEMPLOYEEFLAG as string,\n\t\tMEDICARE_CONTRACT_NUMBER as string,\n\t\tAID_GROUP as string,\n\t\tCOBRA_FLAG as string,\n\t\tCOVERAGE_TIER as string,\n\t\tEMPLOYERCODE as string,\n\t\tEMPLOYERDESCRIPTION as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE1 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE2 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE3 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE4 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE5 as string,\n\t\tMEMBERENROLLMENTCUSTOMCODE6 as string,\n\t\tMEDICARE_PLANID_NUMBER as string,\n\t\tSNP_ENROLLEE_TYPE as string,\n\t\tPCP_START_DATE as string,\n\t\tPCP_END_DATE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 select(mapColumn(\n\t\tGROUP_ID,\n\t\tGROUP_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(GROUP_ID),\n\teach(match(name!='GROUP_ID'), $$ = first($$))) ~> Aggregate1\nAggregate1 sink(input(\n\t\tMember_Group_Code as string,\n\t\tMember_Group_Description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tMember_Group_Code = GROUP_ID,\n\t\tMember_Group_Description = GROUP_NAME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ContractCatCode",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "IFnotnullSink",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\t{Code } as integer,\n\t\tDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 split(isNull({Code }),\n\tdisjoint: false) ~> ConditionalSplit1@(stream1, stream2)\nConditionalSplit1@stream1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\t{Code },\n\t\tDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nConditionalSplit1@stream2 sink(input(\n\t\tContract_Category_Code as string,\n\t\tContract_Category_Code_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tContract_Category_Code = {Code },\n\t\tContract_Category_Code_Desc = Description\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "SurrogateKey1"
						}
					],
					"script": "source(output(\n\t\tTable as string,\n\t\tField as string,\n\t\tReference_Code as string,\n\t\tReference_Code_Value as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 keyGenerate(output(Ref_Data_ID as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 sink(input(\n\t\tRef_Data_ID as integer,\n\t\tRef_Table as string,\n\t\tRef_Field as string,\n\t\tReference_Code as string,\n\t\tReference_Code_Description as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tRef_Data_ID,\n\t\tRef_Table = Table,\n\t\tRef_Field = Field,\n\t\tReference_Code,\n\t\tReference_Code_Description = Reference_Code_Value\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_contractCatCode_excel",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_ContactCatCode",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "ConditionalSplit1"
						}
					],
					"script": "source(output(\n\t\t{Code } as string,\n\t\tDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 split(isNull({Code }),\n\tdisjoint: false) ~> ConditionalSplit1@(stream1, Stream2)\nConditionalSplit1@Stream2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\t{Code },\n\t\tDescription\n\t),\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1\nConditionalSplit1@stream1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\t{Code },\n\t\tDescription\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow5')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source_Plan_Code_excel",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_PlanCode",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "StringtoDate"
						}
					],
					"script": "source(output(\n\t\t{Plan_ID                             } as string,\n\t\tPlan_Start_Date as string,\n\t\tPlan_End_Date as string,\n\t\t{Plan_Name_Description            } as string,\n\t\t{Line_Of_Business                  } as integer,\n\t\t{Plan_Product_Code                 } as string,\n\t\t{market_Type                       } as string,\n\t\t{Grandfathered_Plan_Flag              } as string,\n\t\t{Metal_level                        } as integer,\n\t\t{Acturial_Value } as integer,\n\t\tIssuer_State as string,\n\t\tIssuer_ID as string,\n\t\tPlan_On_Off_Exchange_Indicator as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 derive(Plan_Start_Date = toDate(Plan_Start_Date),\n\t\tPlan_End_Date = toDate(Plan_End_Date)) ~> StringtoDate\nStringtoDate sink(input(\n\t\tPlan_ID as string,\n\t\tPlan_Start_Date as date,\n\t\tPlan_End_Date as date,\n\t\tPlan_Name_Description as string,\n\t\tLine_Of_Business as string,\n\t\tPlan_Product_Code as string,\n\t\tmarket_Type as string,\n\t\tGrandfathered_Plan_Flag as string,\n\t\tMetal_level as string,\n\t\tActurial_Value as string,\n\t\tIssuer_State as string,\n\t\tIssuer_ID as string,\n\t\tPlan_On_Off_Exchange_Indicator as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tPlan_ID = {Plan_ID                             },\n\t\tPlan_Start_Date,\n\t\tPlan_End_Date,\n\t\tPlan_Name_Description = {Plan_Name_Description            },\n\t\tLine_Of_Business = {Line_Of_Business                  },\n\t\tPlan_Product_Code = {Plan_Product_Code                 },\n\t\tmarket_Type = {market_Type                       },\n\t\tGrandfathered_Plan_Flag = {Grandfathered_Plan_Flag              },\n\t\tMetal_level = {Metal_level                        },\n\t\tActurial_Value = {Acturial_Value },\n\t\tIssuer_State,\n\t\tIssuer_ID,\n\t\tPlan_On_Off_Exchange_Indicator\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow6')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tPlan_Benefit_ID as string,\n\t\tPlan_Benefit_Start_Date as string,\n\t\tPlan_Benefit_End_Date as string,\n\t\tPlan_Benefit_Description as string,\n\t\t{Line_Of_Business                  } as integer,\n\t\t{Plan_Product_Code                 } as string,\n\t\tBenefit_Plan_Type_Code as string,\n\t\tPopulation_Category_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 derive(Plan_Benefit_Start_Date = toDate(Plan_Benefit_Start_Date),\n\t\tPlan_Benefit_End_Date = toDate(Plan_Benefit_End_Date),\n\t\tBenefit_Plan_Type_Code = lpad(Benefit_Plan_Type_Code, 2, \"0\"),\n\t\tPopulation_Category_Code = lpad(Population_Category_Code, 2, \"0\")) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tPlan_Benefit_ID as string,\n\t\tPlan_Benefit_Start_Date as date,\n\t\tPlan_Benefit_End_Date as date,\n\t\tPlan_Benefit_Description as string,\n\t\tLine_Of_Business as string,\n\t\tPlan_Product_Code as string,\n\t\tBenefit_Plan_Type_Code as string,\n\t\tPopulation_Category_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tPlan_Benefit_ID,\n\t\tPlan_Benefit_Start_Date,\n\t\tPlan_Benefit_End_Date,\n\t\tPlan_Benefit_Description,\n\t\tLine_Of_Business = {Line_Of_Business                  },\n\t\tPlan_Product_Code = {Plan_Product_Code                 },\n\t\tBenefit_Plan_Type_Code,\n\t\tPopulation_Category_Code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow7')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel3",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable8",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tEnrollment_Contract_ID as string,\n\t\tContract_Number as string,\n\t\tContract_Desc as string,\n\t\tContract_Category_Code as string,\n\t\tLine_Of_Business_Category_Code as string,\n\t\tLine_Of_Business_Sub_Category_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 derive(Line_Of_Business_Category_Code = lpad(Line_Of_Business_Category_Code, 2, \"0\"),\n\t\tLine_Of_Business_Sub_Category_Code = lpad(Line_Of_Business_Sub_Category_Code, 2, \"0\")) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tEnrollment_Contract_ID as integer,\n\t\tContract_Number as string,\n\t\tContract_Desc as string,\n\t\tContract_Category_Code as string,\n\t\tLine_Of_Business_Category_Code as string,\n\t\tLine_Of_Business_Sub_Category_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEnrollment_Contract_ID,\n\t\tContract_Number,\n\t\tContract_Desc,\n\t\tContract_Category_Code,\n\t\tLine_Of_Business_Category_Code,\n\t\tLine_Of_Business_Sub_Category_Code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow8')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText2",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable9",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\t{Enrollment_Benefit_Plan_ID } as string,\n\t\tEnrollment_Contract_ID as string,\n\t\tPlan_ID as string,\n\t\tPlan_Benefit_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(input(\n\t\tEnrollment_Benefit_Plan_ID as integer,\n\t\tEnrollment_Contract_ID as integer,\n\t\tPlan_ID as string,\n\t\tPlan_Benefit_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tEnrollment_Benefit_Plan_ID = {Enrollment_Benefit_Plan_ID },\n\t\tEnrollment_Contract_ID,\n\t\tPlan_ID,\n\t\tPlan_Benefit_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow9')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText6",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable10",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "source(output(\n\t\tMEMBER_ID as string,\n\t\tFULL_NAME as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tMIDDLE_NAME as string,\n\t\tSSN as string,\n\t\tDOB as string,\n\t\tGENDER as string,\n\t\tMEDICARE_ID as string,\n\t\tMEDICAID_ID as string,\n\t\tSUBSCRIBER_ID as string,\n\t\tMEMBERALTID1 as string,\n\t\tMEMBERALTID2 as string,\n\t\tMEMBERALTID3 as string,\n\t\tMEMBERALTID4 as string,\n\t\tMEMBERALTID5 as string,\n\t\tMEMBERALTID6 as string,\n\t\tRELATIONSHIP as string,\n\t\tADDRESS1 as string,\n\t\tADDRESS2 as string,\n\t\tCITY as string,\n\t\tSTATE as string,\n\t\tZIP as string,\n\t\tCOUNTY as string,\n\t\tMember_Contact_Pref as string,\n\t\tLocation_Usage_Type_Code as string,\n\t\tLocation_Usage_Preference_Code as string,\n\t\tHOME_PHONE as string,\n\t\tMOBILE_PHONE as string,\n\t\tPhone_Usage_Type_Code as string,\n\t\tPhone_Usage_Preference_Code as string,\n\t\tEMAIL_ADDRESS as string,\n\t\tEmail_Usage_Type_Code as string,\n\t\tEmail_Usage_Preference_Code as string,\n\t\tMARITAL_STATUS as string,\n\t\tRACE as string,\n\t\tETHNICITY as string,\n\t\tEthnicity_Type as string,\n\t\tRBI_ETHNICITY as string,\n\t\tDeceased_Date as string,\n\t\tRACEETHNICITYSOURCE as string,\n\t\tLANGUAGESPOKEN as string,\n\t\tLANGUAGEWRITTEN as string,\n\t\tLANGUAGEOTHER as string,\n\t\tLANGUAGESPOKENSOURCE as string,\n\t\tLANGUAGEWRITTENSOURCE as string,\n\t\tLANGUAGEOTHERSOURCE as string,\n\t\tLanguge_Usage_Type_Code as string,\n\t\tLanguge_Usage_Preference_Code as string,\n\t\tALTERNATE_PHONE1 as string,\n\t\tALTERNATE_PHONE2 as string,\n\t\tALTERNATE_PHONE3 as string,\n\t\tALTERNATE_PHONE4 as string,\n\t\tALTERNATE_PHONE5 as string,\n\t\tAUTHORIZED_REP_A as string,\n\t\tAUTHORIZED_REP_A_PHONE_1 as string,\n\t\tAUTHORIZED_REP_A_PHONE_2 as string,\n\t\tAUTHORIZED_REP_B as string,\n\t\tAUTHORIZED_REP_B_PHONE_1 as string,\n\t\tAUTHORIZED_REP_B_PHONE_2 as string,\n\t\tOREC as string,\n\t\tECDS_Flag as string,\n\t\tEnrollee_Unique_ID as string,\n\t\tQHP_State as string,\n\t\tCitizenship_Status_Code as string,\n\t\tCountry_Flips_Code as string,\n\t\tWhite_Indirect_Estimate as string,\n\t\tBlack_Indirect_Estimate as string,\n\t\tAsian_Indirect_Estimate as string,\n\t\tAme_rIndian_Indirect_Estimate as string,\n\t\tOther_Indirect_Estimate as string,\n\t\tHispanic_Indirect_Estimate as string,\n\t\tClient_ID_Number as string,\n\t\tCMS_PlanID as string,\n\t\tClient_Member_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> source1\nsource1 derive(FULL_NAME = (FIRST_NAME+\" \"+MIDDLE_NAME+\" \"+LAST_NAME),\n\t\tDOB = coalesce(toDate(DOB,'MM/dd/yyyy'),toDate(DOB,'dd-MM-yyyy'),toDate(DOB,'yyyy/MM/dd'),toDate(DOB,'dd/MM/yyyy'),toDate(DOB,'MMddyyyy'),toDate(DOB,'yyyyddMM'),toDate(DOB,'MMddyyyy'),toDate(DOB,'yyyyMMdd')),\n\t\tGENDER = toString(GENDER)) ~> DerivedColumn1\nDerivedColumn1 sink(input(\n\t\tMember_ID as integer,\n\t\tFull_Name as string,\n\t\tFirst_Name as string,\n\t\tMiddle_Name as string,\n\t\tLast_Name as string,\n\t\tSSN as string,\n\t\tBirth_Date as date,\n\t\tGender_Code as string,\n\t\tMedicaid_ID as string,\n\t\tMedicare_ID as string,\n\t\tSubscriber_Key as string,\n\t\tMEMBERALTID1 as string,\n\t\tMEMBERALTID2 as string,\n\t\tMEMBERALTID3 as string,\n\t\tMEMBERALTID4 as string,\n\t\tMEMBERALTID5 as string,\n\t\tMEMBERALTID6 as string,\n\t\tRELATIONSHIP_CODE as string,\n\t\tAddress_Line_1 as string,\n\t\tAddress_Line_2 as string,\n\t\tCity as string,\n\t\tState_Code as string,\n\t\tZip as string,\n\t\tCounty as string,\n\t\tMember_Contact_Pref as string,\n\t\tLocation_Usage_Type_Code as string,\n\t\tLocation_Usage_Preference_Code as string,\n\t\tPhone_Number as string,\n\t\tPhone_Number_2 as string,\n\t\tPhone_Usage_Type_Code as string,\n\t\tPhone_Usage_Preference_Code as string,\n\t\tEmail_Address as string,\n\t\tEmail_Usage_Type_Code as string,\n\t\tEmail_Usage_Preference_Code as string,\n\t\tMarital_Status_Code as string,\n\t\tRace_Type as string,\n\t\tRace_Source as string,\n\t\tEthnicity_Code as string,\n\t\tEthnicity_Type as string,\n\t\tEthnicity_Source as string,\n\t\tDeceased_Date as date,\n\t\tLanguage_Spoken as string,\n\t\tLanguage_Written as string,\n\t\tLanguage_Other as string,\n\t\tLanguage_Spoken_Source as string,\n\t\tLanguage_Written_Source as string,\n\t\tLanguage_Other_Source as string,\n\t\tLanguage_Usage_Type_Code as string,\n\t\tLanguage_Usage_Preference_Code as string,\n\t\tALTERNATE_PHONE1 as string,\n\t\tALTERNATE_PHONE2 as string,\n\t\tALTERNATE_PHONE3 as string,\n\t\tALTERNATE_PHONE4 as string,\n\t\tALTERNATE_PHONE5 as string,\n\t\tAUTHORIZED_REP_A as string,\n\t\tAUTHORIZED_REP_A_PHONE_1 as string,\n\t\tAUTHORIZED_REP_A_PHONE_2 as string,\n\t\tAUTHORIZED_REP_B as string,\n\t\tAUTHORIZED_REP_B_PHONE_1 as string,\n\t\tAUTHORIZED_REP_B_PHONE_2 as string,\n\t\tOREC as string,\n\t\tECDS_Flag as string,\n\t\tEnrollee_Unique_ID as string,\n\t\tQHP_State as string,\n\t\tCitizenship_Status_Code as string,\n\t\tCounty_Fips_Code as string,\n\t\tWhite_Indirect_Estimate as string,\n\t\tBlack_Indirect_Estimate as string,\n\t\tAsian_Indirect_Estimate as string,\n\t\tAme_rIndian_Indirect_Estimate as string,\n\t\tOther_Indirect_Estimate as string,\n\t\tHispanic_Indirect_Estimate as string,\n\t\tClient_ID_Number as string,\n\t\tCMS_PlanID as string,\n\t\tClient_Member_ID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tMember_ID = MEMBER_ID,\n\t\tFull_Name = FULL_NAME,\n\t\tFirst_Name = FIRST_NAME,\n\t\tLast_Name = LAST_NAME,\n\t\tMiddle_Name = MIDDLE_NAME,\n\t\tSSN,\n\t\tBirth_Date = DOB,\n\t\tGender_Code = GENDER,\n\t\tMedicare_ID = MEDICARE_ID,\n\t\tMedicaid_ID = MEDICAID_ID,\n\t\tSubscriber_Key = SUBSCRIBER_ID,\n\t\tMEMBERALTID1,\n\t\tMEMBERALTID2,\n\t\tMEMBERALTID3,\n\t\tMEMBERALTID4,\n\t\tMEMBERALTID5,\n\t\tMEMBERALTID6,\n\t\tRELATIONSHIP_CODE = RELATIONSHIP,\n\t\tAddress_Line_1 = ADDRESS1,\n\t\tAddress_Line_2 = ADDRESS2,\n\t\tCity = CITY,\n\t\tState_Code = STATE,\n\t\tZip = ZIP,\n\t\tCounty = COUNTY,\n\t\tMember_Contact_Pref,\n\t\tLocation_Usage_Type_Code,\n\t\tLocation_Usage_Preference_Code,\n\t\tPhone_Number = HOME_PHONE,\n\t\tPhone_Number_2 = MOBILE_PHONE,\n\t\tPhone_Usage_Type_Code,\n\t\tPhone_Usage_Preference_Code,\n\t\tEmail_Address = EMAIL_ADDRESS,\n\t\tEmail_Usage_Type_Code,\n\t\tEmail_Usage_Preference_Code,\n\t\tMarital_Status_Code = MARITAL_STATUS,\n\t\tRace_Type = RACE,\n\t\tRace_Source = RACEETHNICITYSOURCE,\n\t\tEthnicity_Code = ETHNICITY,\n\t\tEthnicity_Type,\n\t\tEthnicity_Source = RBI_ETHNICITY,\n\t\tDeceased_Date,\n\t\tLanguage_Spoken = LANGUAGESPOKEN,\n\t\tLanguage_Written = LANGUAGEWRITTEN,\n\t\tLanguage_Other = LANGUAGEOTHER,\n\t\tLanguage_Spoken_Source = LANGUAGESPOKENSOURCE,\n\t\tLanguage_Written_Source = LANGUAGEWRITTENSOURCE,\n\t\tLanguage_Other_Source = LANGUAGEOTHERSOURCE,\n\t\tLanguage_Usage_Type_Code = Languge_Usage_Type_Code,\n\t\tLanguage_Usage_Preference_Code = Languge_Usage_Preference_Code,\n\t\tALTERNATE_PHONE1,\n\t\tALTERNATE_PHONE2,\n\t\tALTERNATE_PHONE3,\n\t\tALTERNATE_PHONE4,\n\t\tALTERNATE_PHONE5,\n\t\tAUTHORIZED_REP_A,\n\t\tAUTHORIZED_REP_A_PHONE_1,\n\t\tAUTHORIZED_REP_A_PHONE_2,\n\t\tAUTHORIZED_REP_B,\n\t\tAUTHORIZED_REP_B_PHONE_1,\n\t\tAUTHORIZED_REP_B_PHONE_2,\n\t\tOREC,\n\t\tECDS_Flag,\n\t\tEnrollee_Unique_ID,\n\t\tQHP_State,\n\t\tCitizenship_Status_Code,\n\t\tCounty_Fips_Code = Country_Flips_Code,\n\t\tWhite_Indirect_Estimate,\n\t\tBlack_Indirect_Estimate,\n\t\tAsian_Indirect_Estimate,\n\t\tAme_rIndian_Indirect_Estimate,\n\t\tOther_Indirect_Estimate,\n\t\tHispanic_Indirect_Estimate,\n\t\tClient_ID_Number,\n\t\tCMS_PlanID,\n\t\tClient_Member_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ContractCatCode_DataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ContractCatCode_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EnrollmentContracts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow7",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow7')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Generate_member_key')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MemberKey",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MemberKey",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MemberKey')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadMember')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Members",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow9",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow9')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Member_Enrollment_Test2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Member_Enrollment_Test2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Load_Member_Enrollment_Test2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Load_Member_Enrollment_Test2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load_Member_Group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Member_Group",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow10",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow10')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Plan_and_plan_benefits')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow5",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow5')]"
			]
		}
	]
}